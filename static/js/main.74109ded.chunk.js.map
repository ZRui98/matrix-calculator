{"version":3,"sources":["util/operations.ts","components/MenuPanel.tsx","store/actions/operationActions.ts","store/actions/matrixActions.ts","components/MatrixCell.tsx","components/MatrixDisplay.tsx","components/InputMatrices.tsx","objects/Matrix.ts","components/AnswerMatrixDisplay.tsx","components/App.tsx","util/matrixFunctions.ts","store/reducers/matrixReducers.ts","store/reducers/operationReducers.ts","store/index.ts","serviceWorker.ts","index.tsx"],"names":["RREF","MULTIPLY","TRANSPOSE","StyledToggleButton","withStyles","theme","root","color","borderColor","backgroundColor","selected","ToggleButton","useStyles","makeStyles","createStyles","margin","spacing","MenuPanel","dispatch","useDispatch","selectedOperation","useSelector","state","operationState","operation","options","map","opt","size","key","value","classes","className","style","marginTop","marginBottom","ToggleButtonGroup","exclusive","onChange","event","type","newOperation","Button","variant","onClick","MatrixCell","props","useState","isValid","setValid","matrix","matricesState","matrices","find","id","answerMatrix","matrixData","row","col","validate","cellValue","val","simplify","e","test","newVal","changeCellVal","disabled","target","createMuiTheme","palette","primary","main","StyledTextField","width","TextField","MatrixDisplay","cols","rows","changeRow","change","rowChange","changeCol","columnChange","callback","isNaN","Number","display","Array","fill","i","rowCells","cell","j","incrementControls","ThemeProvider","label","InputMatrices","matrixDisplays","FormLabel","Matrix","data","this","length","UUID","AnswerMatrixDisplay","matrixState","hasError","App","rules","l","r","doubleSimplify","expression","swapRows","firstRowIndex","secondRowIndex","matrixCpy","slice","tempRow","multiplyRow","multiplier","toString","divideRow","divisor","subtractRowM","subtractingRow","targetRow","multiple","index","helperFunctions","bringToREF","matrixCopy","currentRow","currentColumn","pivotLocation","x","y","findPivotLocation","startingColumn","startingRow","mat","valueOf","reduceBelowPivot","divider","forEach","bringToRREF","undefined","reduceAbovePivot","pivotIndex","findIndex","add","firstMatrix","secondMatrix","addingRow","addRow","transpose","multiply","firstMatrixCopy","row2","reduce","acc","initialState","num","changeCell","action","resizeRow","newSize","deltaRows","pop","push","resizeCol","oldColumns","deltaColumns","changeMatrices","newMatrix","calculateAnswer","MatrixFunctions","rootReducer","combineReducers","targetIndex","answerData","store","createStore","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.74109ded.chunk.js","sourcesContent":["export const RREF: string = 'RREF';\nexport const MULTIPLY: string = 'MULTIPLY';\nexport const TRANSPOSE: string = 'TRANSPOSE';\n","import React, { MouseEvent } from 'react';\nimport { ToggleButton, ToggleButtonGroup } from '@material-ui/lab';\nimport { Button } from '@material-ui/core';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { AppState } from '../store';\nimport { changeOperation } from '../store/actions/operationActions';\nimport { calculate } from '../store/actions/matrixActions';\nimport { withStyles, createStyles, makeStyles, Theme } from '@material-ui/core/styles';\nimport { RREF, MULTIPLY, TRANSPOSE } from '../util/operations';\n\nconst StyledToggleButton = withStyles((theme: Theme) => ({\n\troot: {\n\t\tcolor: '#3F51B5',\n\t\tborderColor: '#3F51B5',\n\t\tbackgroundColor: '#FFFFFF !important'\n\t},\n\tselected: {\n\t\tcolor: '#FFFFFF !important',\n\t\tbackgroundColor: '#3F51B5 !important'\n\t}\n}))(ToggleButton);\n\nconst useStyles = makeStyles((theme: Theme) =>\n\tcreateStyles({\n\t\troot: {\n\t\t\t'& > *': {\n\t\t\t\tmargin: theme.spacing(1),\n\t\t\t}\n\t}}));\n\nconst MenuPanel: React.FC = () => {\n\n\tconst dispatch = useDispatch();\n\tconst selectedOperation = useSelector((state: AppState) => state.operationState.operation);\n\n\tconst onChange = (event: MouseEvent, value: string) => {\n\t\tdispatch(changeOperation(value));\n\t}\n\n\tconst onClick = (event: MouseEvent) => {\n\t\tdispatch(calculate(selectedOperation));\n\t}\n\n\tconst options : JSX.Element[] = [RREF, MULTIPLY, TRANSPOSE].map((opt: string) => {\n\t\tconst selected: boolean = selectedOperation === opt ? true : false;\n\t\treturn (\n\t\t\t<StyledToggleButton\n\t\t\t\tsize=\"small\"\n\t\t\t\tcolor=\"primary\"\n\t\t\t\tkey={opt}\n\t\t\t\tvalue={opt}\n\t\t\t\tselected={selected}>\n\t\t\t{opt}\n\t\t\t</StyledToggleButton>);\n\t});\n\n\tconst style = {\n\t\tmarginTop: '2%',\n\t\tmarginBottom: '1%'\n\t};\n\n\tconst classes = useStyles();\n\n\treturn (\n\t\t<div className={classes.root} style={style}>\n\t\t\t<ToggleButtonGroup exclusive={true} size=\"small\" onChange={onChange}>\n\t\t\t\t{options}\n\t\t\t</ToggleButtonGroup>\n\t\t\t<Button color=\"primary\" size=\"medium\" variant=\"contained\" onClick={onClick}>CALCULATE</Button>\n\t\t</div>\n\t);\n}\n\nexport default MenuPanel;\n","export const CHANGE_OPERATION = 'CHANGE_OPERATION';\nexport const CALCULATE = 'CALCULATE';\n\ninterface ChangeOperationOperation {\n\ttype: typeof CHANGE_OPERATION,\n\tnewOperation: string\t\n}\n\nexport const changeOperation = (newOperation: string) => ({\n\ttype: CHANGE_OPERATION,\n\tnewOperation: newOperation\t\n})\n","export const CHANGE_CELL = 'CHANGE_CELL';\nexport const CHANGE_ROWS = 'CHANGE_ROWS';\nexport const CHANGE_COLUMNS = 'CHANGE_COLUMNS';\nexport const CALCULATE ='CALCULATE';\n\nexport interface ChangeCellAction {\n\ttype: typeof CHANGE_CELL,\n\tid: string,\n\trow: number,\n\tcol: number\n\tval: string\n}\n\nexport const changeCell = (row: number, col: number, val: string, matrixId: string): ChangeCellAction => ({\n\ttype: CHANGE_CELL,\n\tid: matrixId,\n\tcol: col,\n\trow: row,\n\tval: val,\n})\n\ninterface ChangeRowsAction {\n\ttype: typeof CHANGE_ROWS,\n\tid: string,\n\trowChange: number\t\n}\n\ninterface ChangeColumnsAction {\n\ttype: typeof CHANGE_COLUMNS,\n\tid: string,\n\tcolumnChange: number\t\n}\n\ntype ChangeDimensionsAction = ChangeRowsAction | ChangeColumnsAction;\n\nexport const changeColumns = (change: number, matrixId: string): ChangeDimensionsAction => ({\n\ttype: CHANGE_COLUMNS,\n\tid: matrixId,\n\tcolumnChange: change\t\n})\n\nexport const changeRows = (change: number, matrixId: string): ChangeDimensionsAction => ({\n\ttype: CHANGE_ROWS,\n\tid: matrixId,\n\trowChange: change\n})\n\ninterface CalculateAction {\n\ttype: typeof CALCULATE,\n\toperation: string\n}\n\nexport const calculate = (operation: string): CalculateAction => ({\n\ttype: CALCULATE,\n\toperation: operation\n})\n","import React, {useState} from 'react';\nimport {simplify} from 'mathjs';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { AppState  } from '../store';\nimport { changeCell } from '../store/actions/matrixActions';\nimport Matrix from '../objects/Matrix'\n\ninterface MatrixCellProps {\n\tid: string,\n\trow: number,\n\tcol: number,\n\tdisabled: boolean,\n\tstyle?: React.CSSProperties\n}\n\nconst MatrixCell: React.FC<MatrixCellProps> = (props: MatrixCellProps) => {\n\tconst [isValid, setValid] = useState(true);\n\tconst value: string = useSelector((state: AppState) => {\n\t\tlet matrix: Matrix | undefined | null = state.matricesState.matrices.find(matrix => matrix.id === props.id);\n\t\tif (!matrix)\n\t\t\tmatrix = state.matricesState.answerMatrix;\n\t\tif (!matrix) return '0';\n\t\treturn matrix.matrixData[props.row][props.col];\n\t});\n\tconst dispatch = useDispatch();\n\tconst changeCellVal = (newVal: string) => dispatch(changeCell(props.row, props.col, newVal, props.id));\n\n\tconst validate = (cellValue : string) => {\n\t\tlet val: boolean = true;\n\t\ttry {\n\t\t\tsimplify(cellValue);\n\t\t} catch(e) {\n\t\t\tval = false;\n\t\t}\n\t\tval = val ? !(/^\\s+$/.test(cellValue) || cellValue === '') : val;\n\t\tsetValid(val);\n\t\tchangeCellVal(cellValue);\n\t}\n\n\treturn (\n\t\t<input\n\t\t\ttype=\"text\"\n\t\t\tvalue={value}\n\t\t\tstyle={props.style}\n\t\t\tonChange={props.disabled ? (e: React.ChangeEvent<HTMLInputElement>) => {} : (e: React.ChangeEvent<HTMLInputElement>) => {validate(e.target.value)}}\n\t\t\tclassName={isValid ? 'cell valid' : 'cell invalid'}\n\t\t/>\n\t);\n}\n\nexport default MatrixCell;\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TextField } from '@material-ui/core';\nimport MatrixCell from './MatrixCell';\nimport Matrix from '../objects/Matrix';\nimport { changeColumns, changeRows } from '../store/actions/matrixActions';\nimport { ThemeProvider, createMuiTheme, withStyles } from '@material-ui/core/styles';\n\n\nconst theme = createMuiTheme({\n\tpalette: {\n\t\tprimary: {\n\t\t\tmain:'#000000',\n\t\t},\n\t},\n});\n\nconst StyledTextField = withStyles({\n\troot: {\n\t\tmargin: theme.spacing(1),\n\t\twidth: 200,\n\t}\n})(TextField);\n\ninterface MatrixProps {\n\tmatrix: Matrix;\n\tdisabled?: boolean;\n}\n\nconst MatrixDisplay: React.FC<MatrixProps> = (props: MatrixProps) => {\n\n\tlet { cols, rows } = props.matrix;\n\tconst dispatch = useDispatch();\n\tconst changeRow = (newVal: number) => dispatch(changeRows(newVal, props.matrix.id));\n\tconst changeCol = (newVal: number) => dispatch(changeColumns(newVal, props.matrix.id));\n\n\tconst style = {\n\t\twidth: `${60 / cols}%`,\n\t};\n\n\tfunction validate(val: number|string, callback: (newVal: number) => {}) {\n\t\tif (!isNaN(Number(val))) {\n\t\t\tcallback(Number(val));\n\t\t}\n\t}\n\n\tconst display = Array(rows).fill(0).map((row, i) => {\n\t\tconst rowCells = Array(cols).fill(0).map((cell, j) => {\n\t\t\treturn (\n\t\t\t\t<MatrixCell\n\t\t\t\t\tstyle={style}\n\t\t\t\t\tid={props.matrix.id}\n\t\t\t\t\trow={i}\n\t\t\t\t\tcol={j}\n\t\t\t\t\tkey={props.matrix.id+i+\"_\"+j}\n\t\t\t\t\tdisabled={props.disabled ? true : false}\n\t\t\t\t/>)\n\t\t});\n\t\treturn (\n\t\t\t<div className=\"row\" key={props.matrix.id+i}>\n\t\t\t\t{rowCells}\n\t\t\t</div>\n\t\t);\n\t});\n\tconst incrementControls = (\n\t\t\t<ThemeProvider theme={theme}>\n\t\t\t\t<StyledTextField\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tsize=\"small\"\n\t\t\t\t\tlabel=\"Rows\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={rows}\n\t\t\t\t\tonChange={event =>{validate(event.target.value, changeRow)}}\n\t\t\t\t/>\n\t\t\t\t<StyledTextField\n\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\tsize=\"small\"\n\t\t\t\t\tlabel=\"Columns\"\n\t\t\t\t\ttype=\"number\"\n\t\t\t\t\tvalue={cols}\n\t\t\t\t\tonChange={event=>{validate(event.target.value, changeCol)}}\n\t\t\t\t/>\n\t\t\t</ThemeProvider>\n\t);\n\treturn (\n\t\t<div className={\"matrix\"}>\n\t\t\t{!props.disabled && incrementControls}\n\t\t\t{display}\n\t\t</div>\n\t);\n}\n\nexport default MatrixDisplay;\n","import React from 'react';\nimport { FormLabel } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport MatrixDisplay from './MatrixDisplay';\nimport { AppState  } from '../store';\n\nconst InputMatrices: React.FC = () => {\n\tconst matrices = useSelector((state: AppState) => state.matricesState.matrices);\n\tconst matrixDisplays = matrices.map(matrix => (<MatrixDisplay matrix={matrix} key={matrix.id} />));\n\treturn (\n\t\t<div>\n\t\t\t<FormLabel style={{display:'block'}}>Input Matrices</FormLabel>\n\t\t\t{ matrixDisplays  }\n\t\t</div>\n\t);\n}\n\nexport default InputMatrices;\n","import UUID from 'uuid/v1';\n\nclass Matrix {\n\tmatrixData: string[][];\n\tid: string;\n\trows: number;\n\tcols: number;\n\tconstructor(data: string[][]) {\n\t\tthis.matrixData = data;\n\t\tthis.rows = data.length;\n\t\tthis.cols = data.length > 0 ? data[0].length : 0;\n\t\tthis.id = UUID();\n\t}\n}\n\nexport default Matrix;\n","import React from 'react';\nimport { FormLabel } from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport { AppState  } from '../store';\nimport MatrixDisplay from './MatrixDisplay';\nimport Matrix from '../objects/Matrix';\n\nconst AnswerMatrixDisplay: React.FC = () => {\n\tlet matrixState = useSelector((state: AppState) => ({\n\t\tanswerMatrix: state.matricesState.answerMatrix,\n\t\thasError: state.matricesState.hasError\n\t}));\n\tif (matrixState.hasError) {\n\t\treturn (<div style={{color:'#FF0000'}}>Error in Input</div>)\n\t}\n\treturn (\n\t\t<div>\n\t\t\t{ matrixState.answerMatrix && <FormLabel style={{display:'block'}}>Answer Matrix</FormLabel> }\n\t\t\t<MatrixDisplay\n\t\t\t\tmatrix={matrixState.answerMatrix ? matrixState.answerMatrix: new Matrix([[]])}\n\t\t\t\tdisabled={true}\n\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default AnswerMatrixDisplay;\n","import React from 'react';\nimport '../css/App.css';\nimport '../css/Matrix.css';\nimport MenuPanel from './MenuPanel';\nimport InputMatrices from './InputMatrices';\nimport AnswerMatrixDisplay from './AnswerMatrixDisplay';\n\nconst App: React.FC = () => {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<MenuPanel />\n\t\t\t<InputMatrices />\n\t\t\t<AnswerMatrixDisplay />\n\t\t</div>\n\t);\n}\nexport default App;\n","import { simplify } from 'mathjs';\n\n\nconst rules = [\n\t{l:'n/n', r:'1'},\n\t{l:'n*(1/n)', r:'1'},\n    {l:'n1*n3/n2-n1/n2*n3',r: '0'},\n\t{l:'(n1/n2)*(n3/n4)', r:'(n1*n3)/(n2*n4)'},\n\t{l:'n2/(n2*n1)', r:'1/n1'},\n\t{l:'n3*n2/(n2*n1)', r:'n3/n1'},\n\t{l: 'n1*(n2+n3)', r: 'n1*n2+n1*n3'},\n\t{l: 'n1*n2+n1*n3', r: 'n1*(n2+n3)'},\n\t{l: 'n1*(n2-n3)', r: 'n1*n2-n1*n3'},\n\t{l: 'n1*n2-n1*n3', r: 'n1*(n2-n3)'},\n\t{l:'(n1*n2)/(n1*n2)', r:'1'}\n];\n\nconst doubleSimplify = (expression: string) => simplify(simplify(simplify(expression,rules)),rules);\n\nconst swapRows = (firstRowIndex : number, secondRowIndex : number, matrix : string[][]) : string[][] => {\n\tlet matrixCpy : string[][] = matrix.map(row => row.slice());\n\tconst tempRow = matrix[firstRowIndex].slice(0);\n\tmatrixCpy[firstRowIndex] = matrix[secondRowIndex].slice(0);\n\tmatrixCpy[secondRowIndex] = tempRow;\n\tmatrixCpy = matrixCpy.map(row => row.map(val => val));\n\treturn matrixCpy;\n}\n\nconst multiplyRow = (row : string[], multiplier : string): string[] => {\n\tmultiplier = doubleSimplify(multiplier).toString();\n\treturn row.map((val: string) => doubleSimplify(multiplier + ' * (' + val + ')').toString());\n};\n\nconst divideRow = (row: string[], divisor: string): string[] => {\n\tdivisor = doubleSimplify(divisor).toString();\n\treturn row.map((val: string) => doubleSimplify('(' + val + ') / (' + divisor + ')').toString());\n}\n\nconst subtractRowM = (subtractingRow : string[], targetRow : string[], multiplier: string = '1'): string[] => {\n\tconst multiple = multiplier === '1' ? subtractingRow : multiplyRow(subtractingRow, multiplier);\n\treturn targetRow.map((val : string, index : number) => \n\t\t\t\t\tdoubleSimplify('(' + val + ') - (' +  multiple[index] + ')').toString());\n};\n\nconst addRow = (addingRow : string[], targetRow : string[], multiplier = '1') => {\n\tconst multiple = multiplyRow(addingRow, multiplier);\n\treturn targetRow.map((val, index) => doubleSimplify('(' + val + ') + (' +  multiple[index] + ')').toString());\n};\n\nconst dotProductRow = (row1 : string[], row2 : string[]) => {\n\treturn doubleSimplify(row1.reduce((acc, val, i) => {\n\t\tconst val2 = row2[i];\n\t\treturn acc + val + '*' + val2 + '+';\n\t}, '').slice(0,-1)).toString()\n};\n\nconst helperFunctions = {\n  // bring a matrix to REF.\n  bringToREF: (matrix: string[][]) => {\n    let matrixCopy = matrix.map(row => row.slice());\n    let currentRow = 0;\n    let currentColumn = 0;\n    let pivotLocation : ( {x : number, y : number} | null )= { x: currentRow, y: currentColumn };\n    /**\n     * finds a pivot location by first checking below current column, then checking next\n     * column to the right.\n     */\n    const findPivotLocation = (startingColumn : number, startingRow : number, mat : string[][]) => {\n      for (let x = startingColumn; x < mat[0].length; x += 1) {\n        for (let y = startingRow; y < mat.length; y += 1) {\n          if (mat[y][x].valueOf() !== '0') {\n            return { x, y };\n          }\n        }\n      }\n      return null;\n    };\n    // make all entries below pivot zero by performing ERO's\n    // ROW = ROW - PIVOT * (multiplier s.t ROW in PIVOT column cancels out).\n\tconst reduceBelowPivot = (row : string[], i : number) => {\n\t\tconst index = currentRow + i + 1;\n\t\tconst multiplier = matrixCopy[index][currentColumn];\n\t\tif (multiplier === '0') {\n\t\t\treturn;\n\t\t}\n\t\tmatrixCopy[index] = subtractRowM(matrixCopy[currentRow], matrixCopy[index], multiplier);\n    };\n\n    // go through all diagonal positions for possible pivot locations until end is reached\n    while (currentRow < matrixCopy.length) {\n\t\tpivotLocation = findPivotLocation(currentColumn, currentRow, matrixCopy);\n\t\t// exit on no pivot found, as matrix is in row echelon form\n\t\tif (!pivotLocation) {\n\t\t\tbreak;\n\t\t}\n\t\t// set furthest left pivot to highest row possible, and divide row so pivot is 1\n\t\tmatrixCopy = swapRows(currentRow, pivotLocation.y, matrixCopy);\n\t\tcurrentColumn = pivotLocation.x;\n\t\tconst pivot = matrixCopy[currentRow][currentColumn];\n\t\tconst divider = pivot;\n\t\tmatrixCopy[currentRow] = divideRow(matrixCopy[currentRow], divider);\n\n\t\t// reduce all values below pivot in column so that they all become zero\n\t\tmatrixCopy.slice(currentRow + 1).forEach(reduceBelowPivot);\n\t\tcurrentRow += 1;\n\t\tcurrentColumn += 1;\n\t}\n\n    return matrixCopy;\n  },\n\n  // convert a REF matrix to RREF\n  bringToRREF: (matrix: string[][]): string[][] => {\n    if (matrix === undefined || matrix === null) {\n      return [[]];\n    }\n    let matrixCopy : string[][] = matrix.map(row => row.slice());\n\tmatrixCopy = helperFunctions.bringToREF(matrix);\n    let currentRow : number = matrix.length - 1;\n\n    const hasPivot = (row : string[]) => row.findIndex(cell => cell.valueOf() === '1');\n    const reduceAbovePivot = (pivotIndex : number) => (\n      matrixCopy.slice(0, currentRow).forEach((row, index) => {\n        if (row[pivotIndex] !== '0') {\n          const multiplier = matrixCopy[index][pivotIndex].valueOf();\n          matrixCopy[index] = subtractRowM(matrixCopy[currentRow], matrixCopy[index], multiplier);\n        }\n      })\n    );\n\n    while (currentRow > 0) {\n      const pivotLocation = hasPivot(matrixCopy[currentRow]);\n      if (pivotLocation !== -1) {\n        reduceAbovePivot(pivotLocation);\n      }\n      currentRow -= 1;\n    }\n    return matrixCopy;\n  },\n\n  add: (firstMatrix : string[][], secondMatrix : string[][]) => (\n    firstMatrix.map((row, i) => addRow(row, secondMatrix[i]))\n  ),\n\n  transpose: (matrix : string[][]) => matrix[0].map((col, i) => matrix.map(row => row[i])),\n\n  multiply: (firstMatrix : string[][], secondMatrix : string[][]): string[][] => {\n    const firstMatrixCopy = firstMatrix.map(row => row.slice());\n    const cols = helperFunctions.transpose(secondMatrix);\n    const result = firstMatrixCopy.map(row => cols.map(col => dotProductRow(row, col)));\n    return result;\n  },\n};\n\nexport default helperFunctions;\n","import Matrix from '../../objects/Matrix';\nimport { AnyAction, Reducer } from 'redux';\nimport { CHANGE_ROWS, CHANGE_COLUMNS, CHANGE_CELL, CALCULATE } from '../actions/matrixActions';\nimport { CHANGE_OPERATION } from '../actions/operationActions';\nimport { RREF, MULTIPLY, TRANSPOSE } from '../../util/operations';\nimport MatrixFunctions from '../../util/matrixFunctions';\n\nexport interface MatricesState {\n\tmatrices: Matrix[],\n\tanswerMatrix : Matrix | null,\n\thasError: boolean\n}\n\nconst initialState: MatricesState = {\n\tmatrices: [new Matrix(new Array(3).fill('0').map(num => new Array(3).fill('0')))],\n\tanswerMatrix: null,\n\thasError: false\n}\n\nconst changeCell = (matrix: Matrix, action: AnyAction) => {\n\tmatrix.matrixData[action.row][action.col] = action.val;\n\treturn matrix;\n}\n\nconst resizeRow = (matrix: Matrix, newSize: number): Matrix => {\n\tif (newSize < 0) {\n\t\treturn matrix;\n\t}\n\tmatrix.rows = newSize;\n\tconst { matrixData } = matrix;\n\tlet deltaRows = newSize - matrixData.length;\n\twhile (deltaRows < 0) {\n\t\tdeltaRows += 1;\n\t\tmatrixData.pop();\n\t}\n\twhile (deltaRows > 0) {\n\t\tdeltaRows -= 1;\n\t\tmatrixData.push(new Array(matrix.cols).fill('0'));\n\t}\n\treturn matrix;\n}\n\nconst resizeCol = (matrix: Matrix, newSize: number): Matrix => {\n\tif (newSize >= 0) {\n\t\tmatrix.cols = newSize;\n\t}\n\tif (newSize < 0 || matrix.matrixData.length <= 0) {\n\t\treturn matrix;\n\t}\n\tconst { matrixData } = matrix;\n\tconst oldColumns = matrixData[0].length;\n    matrixData.forEach((row) => {\n      let deltaColumns = newSize - oldColumns;\n      while (deltaColumns < 0) {\n        deltaColumns += 1;\n        row.pop();\n      }\n      while (deltaColumns > 0) {\n        deltaColumns -= 1;\n        row.push('0');\n      }\n\t});\n\treturn matrix;\n}\n\nconst changeMatrices = (newOperation: string, matrices: Matrix[]): Matrix[] => {\n\tif (newOperation === RREF || newOperation === TRANSPOSE) {\n\t\treturn [matrices[0]];\n\t} else {\n\t\tlet newMatrix: Matrix = new Matrix(new Array(matrices[0].rows)\n\t\t\t\t.fill('0')\n\t\t\t\t.map(num => new Array(matrices[0].cols).fill('0')));\n\t\treturn [matrices[0], newMatrix];\n\t}\n}\n\nconst calculateAnswer = (operation: string, matrices: Matrix[]): string[][] | null => {\n\tswitch(operation) {\n\t\tcase RREF: {\n\t\t\ttry {\n\t\t\t\treturn MatrixFunctions.bringToRREF(matrices[0].matrixData);\n\t\t\t} catch {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tcase MULTIPLY: {\n\t\t\ttry {\n\t\t\t\treturn MatrixFunctions.multiply(matrices[0].matrixData, matrices[1].matrixData);\n\t\t\t} catch {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\tcase TRANSPOSE: {\n\t\t\ttry {\n\t\t\t\treturn MatrixFunctions.transpose(matrices[0].matrixData);\n\t\t\t} catch {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\nexport const dimensionReducer: Reducer<MatricesState> = (state: MatricesState = initialState, action: AnyAction): MatricesState => {\n\tlet { matrices, answerMatrix, hasError } = state;\n\tswitch (action.type) {\n\t\tcase CHANGE_ROWS: {\n\t\t\tlet targetIndex = matrices.findIndex(matrix => matrix.id === action.id);\n\t\t\tmatrices = matrices.map((matrix, index) => {\n\t\t\t\tif (targetIndex === index) {\n\t\t\t\t\treturn resizeRow(matrix, action.rowChange);\n\t\t\t\t} else if (targetIndex - 1 === index) {\n\t\t\t\t\treturn resizeCol(matrix, action.rowChange);\t\n\t\t\t\t} else {\n\t\t\t\t\treturn matrix;\n\t\t\t\t}\n\t\t\t});\n\t\t\tbreak;\n\t\t}\n\t\tcase CHANGE_COLUMNS: {\n\t\t\tlet targetIndex = matrices.findIndex(matrix => matrix.id === action.id);\n\t\t\tmatrices = matrices.map((matrix, index) => {\n\t\t\t\tif (targetIndex === index) {\n\t\t\t\t\treturn resizeCol(matrix, action.columnChange);\n\t\t\t\t} else if (targetIndex + 1 === index) {\n\t\t\t\t\treturn resizeRow(matrix, action.columnChange);\t\n\t\t\t\t} else {\n\t\t\t\t\treturn matrix;\n\t\t\t\t}\n\t\t\t})\n\t\t\tbreak;\n\t\t}\n\t\tcase CHANGE_CELL: {\n\t\t\tlet targetIndex: number = matrices.findIndex(matrix => matrix.id === action.id);\n\t\t\tmatrices[targetIndex] = changeCell(matrices[targetIndex], action);\n\t\t\tbreak;\n\t\t}\n\t\tcase CHANGE_OPERATION: {\n\t\t\tmatrices = changeMatrices(action.newOperation, matrices);\n\t\t\tanswerMatrix = null;\n\t\t\thasError = false;\n\t\t\tbreak;\n\t\t}\n\t\tcase CALCULATE: {\n\t\t\tlet answerData: string[][] | null = calculateAnswer(action.operation, matrices);\n\t\t\thasError = answerData === null ? true : false;\n\t\t\tanswerMatrix = answerData === null ? null : new Matrix(answerData);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn {\n\t\tmatrices,\n\t\tanswerMatrix,\n\t\thasError\n\t};\n}\n","import { AnyAction, Reducer } from 'redux';\nimport { CHANGE_OPERATION } from '../actions/operationActions';\n\n\nexport interface OperationState {\n\toperation: string\n}\n\nconst initialState: OperationState = {\n\toperation: 'RREF'\n}\n\nexport const operationReducer: Reducer<OperationState> = \n\t(state: OperationState = initialState, action: AnyAction): OperationState => {\n\tlet operation: string = state.operation;\n\tswitch(action.type) {\n\t\tcase CHANGE_OPERATION: {\n\t\t\toperation = action.newOperation;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn ({\n\t\toperation\n\t});\n}\n\n","import {createStore} from 'redux';\nimport {combineReducers} from 'redux';\nimport {dimensionReducer, MatricesState} from './reducers/matrixReducers';\nimport {operationReducer, OperationState} from './reducers/operationReducers';\n\nexport interface AppState {\n\tmatricesState: MatricesState,\n\toperationState: OperationState\n}\n\nconst rootReducer = combineReducers<AppState>({\n\tmatricesState: dimensionReducer,\n\toperationState: operationReducer\n});\nexport const store = createStore(rootReducer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './components/App';\nimport {store} from './store';\nimport {Provider} from 'react-redux'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}